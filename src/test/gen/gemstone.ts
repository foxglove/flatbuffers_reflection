// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Rock, RockT } from './rock';


export class Gemstone implements flatbuffers.IUnpackableObject<GemstoneT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Gemstone {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGemstone(bb:flatbuffers.ByteBuffer, obj?:Gemstone):Gemstone {
  return (obj || new Gemstone()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGemstone(bb:flatbuffers.ByteBuffer, obj?:Gemstone):Gemstone {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Gemstone()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

shine():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

rocks(index: number, obj?:Rock):Rock|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Rock()).__init(this.bb!.__vector(this.bb_pos + offset) + index, this.bb!) : null;
}

rocksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGemstone(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addShine(builder:flatbuffers.Builder, shine:number) {
  builder.addFieldFloat64(0, shine, 0.0);
}

static addRocks(builder:flatbuffers.Builder, rocksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rocksOffset, 0);
}

static startRocksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGemstone(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGemstone(builder:flatbuffers.Builder, shine:number, rocksOffset:flatbuffers.Offset):flatbuffers.Offset {
  Gemstone.startGemstone(builder);
  Gemstone.addShine(builder, shine);
  Gemstone.addRocks(builder, rocksOffset);
  return Gemstone.endGemstone(builder);
}

unpack(): GemstoneT {
  return new GemstoneT(
    this.shine(),
    this.bb!.createObjList<Rock, RockT>(this.rocks.bind(this), this.rocksLength())
  );
}


unpackTo(_o: GemstoneT): void {
  _o.shine = this.shine();
  _o.rocks = this.bb!.createObjList<Rock, RockT>(this.rocks.bind(this), this.rocksLength());
}
}

export class GemstoneT implements flatbuffers.IGeneratedObject {
constructor(
  public shine: number = 0.0,
  public rocks: (RockT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const rocks = builder.createStructOffsetList(this.rocks, Gemstone.startRocksVector);

  return Gemstone.createGemstone(builder,
    this.shine,
    rocks
  );
}
}
